{"version":3,"file":"sentry.interceptor.js","sourceRoot":"/","sources":["sentry.interceptor.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,2CAMwB;AACxB,0DAMmC;AAEnC,+BAAoE;AAIpE,qDAAiD;AAKjD,6EAAwE;AACxE,uCAAgD;AAGzC,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IAG5B,YAAoB,aAAuC;QAAvC,kBAAa,GAAb,aAAa,CAA0B;QAFxC,WAAM,GACvB,8BAAa,CAAC,qBAAqB,EAAE,CAAC;IACsB,CAAC;IAE/D,SAAS,CAAC,OAAyB,EAAE,IAAiB;QAEpD,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,EAAE,EAAE,eAAe,EAAE,CAAC,CAAC;QAEpE,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CACvB,IAAA,iBAAU,EAAC,CAAC,KAAK,EAAE,EAAE;YACnB,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE;;gBACzC,IAAA,uBAAgB,EAAC,KAAK,EAAE,MAAA,IAAI,CAAC,aAAa,CAAC,IAAI,0CAAE,eAAe,EAAE,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC;YACH,OAAO,IAAA,iBAAU,EAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC,CAAC,EACF,IAAA,eAAQ,EAAC,GAAG,EAAE;;YACZ,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,EAAE,CAAC;YACf,MAAA,IAAI,CAAC,aAAa,CAAC,IAAI,0CAAE,MAAM,EAAE,CAAC;QACpC,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;CACF,CAAA;AAtBY,iBAAiB;IAD7B,IAAA,mBAAU,EAAC,EAAE,KAAK,EAAE,kBAAS,CAAC,OAAO,EAAE,CAAC;qCAIJ,qDAAwB;GAHhD,iBAAiB,CAsB7B;AAtBY,8CAAiB","sourcesContent":["// Nestjs imports\nimport {\n  CallHandler,\n  ExecutionContext,\n  HttpException,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport {\n  HttpArgumentsHost,\n  WsArgumentsHost,\n  RpcArgumentsHost,\n  ContextType,\n  Scope as NestScope,\n} from '@nestjs/common/interfaces';\n// Rxjs imports\nimport { catchError, finalize, Observable, throwError } from 'rxjs';\n// Sentry imports\nimport { Handlers, Scope } from '@sentry/node';\n\nimport { SentryService } from './sentry.service';\nimport {\n  SentryInterceptorOptions,\n  SentryInterceptorOptionsFilter,\n} from './sentry.interfaces';\nimport { SentryTransactionService } from './sentry-transaction.service';\nimport { captureException } from '@sentry/node';\n\n@Injectable({ scope: NestScope.REQUEST })\nexport class SentryInterceptor implements NestInterceptor {\n  protected readonly client: SentryService =\n    SentryService.SentryServiceInstance();\n  constructor(private sentryService: SentryTransactionService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    // start a child span for performance tracing\n    const span = this.sentryService.startChild({ op: `route handler` });\n\n    return next.handle().pipe(\n      catchError((error) => {\n        this.client.instance().withScope((scope) => {\n          captureException(error, this.sentryService.span?.getTraceContext());\n        });\n        return throwError(() => error);\n      }),\n      finalize(() => {\n        span?.finish();\n        this.sentryService.span?.finish();\n      }),\n    );\n  }\n}\n"]}