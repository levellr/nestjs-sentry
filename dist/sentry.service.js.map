{"version":3,"file":"sentry.service.js","sourceRoot":"/","sources":["sentry.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable, ConsoleLogger } from '@nestjs/common';\nimport { OnApplicationShutdown } from '@nestjs/common';\nimport { ClientOptions, Client } from '@sentry/types';\nimport * as Sentry from '@sentry/node';\nimport { SENTRY_MODULE_OPTIONS } from './sentry.constants';\nimport { SentryModuleOptions } from './sentry.interfaces';\n\n@Injectable()\nexport class SentryService\n  extends ConsoleLogger\n  implements OnApplicationShutdown\n{\n  private static serviceInstance: SentryService;\n  constructor(\n    @Inject(SENTRY_MODULE_OPTIONS)\n    readonly opts?: SentryModuleOptions,\n  ) {\n    super();\n    if (!(opts && opts.dsn)) {\n      // console.log('options not found. Did you use SentryModule.forRoot?');\n      return;\n    }\n    const { debug, integrations = [], ...sentryOptions } = opts;\n    Sentry.init({\n      ...sentryOptions,\n      integrations: [\n        new Sentry.Integrations.OnUncaughtException({\n          onFatalError: async (err) => {\n            // console.error('uncaughtException, not cool!')\n            // console.error(err);\n            if (err.name === 'SentryError') {\n              console.log(err);\n            } else {\n              (\n                Sentry.getCurrentHub().getClient<\n                  Client<ClientOptions>\n                >() as Client<ClientOptions>\n              ).captureException(err);\n              process.exit(1);\n            }\n          },\n        }),\n        new Sentry.Integrations.OnUnhandledRejection({ mode: 'warn' }),\n        ...integrations,\n      ],\n    });\n  }\n\n  public static SentryServiceInstance(): SentryService {\n    if (!SentryService.serviceInstance) {\n      SentryService.serviceInstance = new SentryService();\n    }\n    return SentryService.serviceInstance;\n  }\n\n  log(message: string, context?: string) {\n    message = `${message}`;\n    try {\n      super.log(message, context);\n      Sentry.addBreadcrumb({\n        message,\n        level: 'log',\n        data: {\n          context,\n        },\n      });\n    } catch (err) {}\n  }\n\n  error(message: string, trace?: string, context?: string) {\n    message = `${message}`;\n    try {\n      super.error(message, trace, context);\n      Sentry.captureMessage(message, 'error');\n    } catch (err) {}\n  }\n\n  warn(message: string, context?: string) {\n    message = `${message}`;\n    try {\n      super.warn(message, context);\n      Sentry.captureMessage(message, 'warning');\n    } catch (err) {}\n  }\n\n  debug(message: string, context?: string) {\n    message = `${message}`;\n    try {\n      super.debug(message, context);\n      Sentry.addBreadcrumb({\n        message,\n        level: 'debug',\n        data: {\n          context,\n        },\n      });\n    } catch (err) {}\n  }\n\n  verbose(message: string, context?: string, asBreadcrumb?: boolean) {\n    message = `${message}`;\n    try {\n      super.verbose(message, context);\n      Sentry.addBreadcrumb({\n        message,\n        level: 'info',\n        data: {\n          context,\n        },\n      });\n    } catch (err) {}\n  }\n\n  instance() {\n    return Sentry;\n  }\n\n  async onApplicationShutdown(signal?: string) {\n    if (this.opts?.close?.enabled === true) {\n      await Sentry.close(this.opts?.close.timeout);\n    }\n  }\n}\n"]}