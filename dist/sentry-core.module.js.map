{"version":3,"file":"sentry-core.module.js","sourceRoot":"/","sources":["sentry-core.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,2CAA+E;AAM/E,yDAAyE;AACzE,qDAAiD;AACjD,yDAA2D;AAC3D,uCAA+C;AAC/C,6DAAyD;AACzD,6EAAwE;AAIjE,IAAM,gBAAgB,wBAAtB,MAAM,gBAAgB;IACpB,MAAM,CAAC,OAAO,CAAC,OAA4B;QAChD,MAAM,QAAQ,GAAG,IAAA,wCAAqB,EAAC,OAAO,CAAC,CAAC;QAChD,OAAO;YACL,OAAO,EAAE,CAAC,QAAQ,EAAE,8BAAa,CAAC;YAClC,MAAM,EAAE,kBAAgB;YACxB,SAAS,EAAE;gBACT,QAAQ;gBACR,8BAAa;gBACb,qDAAwB;gBACxB;oBACE,OAAO,EAAE,sBAAe;oBACxB,QAAQ,EAAE,sCAAiB;iBAC5B;aACF;SACF,CAAC;IACJ,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,OAAiC;QAC1D,MAAM,QAAQ,GAAa;YACzB,MAAM,EAAE,CAAC,wCAAqB,CAAC;YAC/B,OAAO,EAAE,+BAAY;YACrB,UAAU,EAAE,CAAC,OAA4B,EAAE,EAAE,CAAC,IAAI,8BAAa,CAAC,OAAO,CAAC;SACzE,CAAC;QACF,OAAO;YACL,OAAO,EAAE,CAAC,QAAQ,EAAE,8BAAa,CAAC;YAClC,OAAO,EAAE,OAAO,CAAC,OAAO;YACxB,MAAM,EAAE,kBAAgB;YACxB,SAAS,EAAE;gBACT,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;gBACrC,QAAQ;gBACR,8BAAa;gBACb,qDAAwB;gBACxB;oBACE,OAAO,EAAE,sBAAe;oBACxB,QAAQ,EAAE,sCAAiB;iBAC5B;aACF;SACF,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,oBAAoB,CACjC,OAAiC;QAEjC,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,UAAU,EAAE;YAC7C,OAAO,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC,CAAC;SACnD;QACD,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAsC,CAAC;QAChE,OAAO;YACL,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC;YACxC;gBACE,OAAO,EAAE,QAAQ;gBACjB,QAAQ;aACT;SACF,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,0BAA0B,CACvC,OAAiC;QAEjC,IAAI,OAAO,CAAC,UAAU,EAAE;YACtB,OAAO;gBACL,MAAM,EAAE,OAAO,CAAC,MAAM,IAAI,EAAE;gBAC5B,OAAO,EAAE,wCAAqB;gBAC9B,UAAU,EAAE,OAAO,CAAC,UAAU;aAC/B,CAAC;SACH;QACD,MAAM,MAAM,GAAG;YACb,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,WAAW,CAA+B;SACxE,CAAC;QACF,OAAO;YACL,OAAO,EAAE,wCAAqB;YAC9B,UAAU,EAAE,CAAO,cAAoC,EAAE,EAAE,gDACzD,OAAA,MAAM,cAAc,CAAC,yBAAyB,EAAE,CAAA,GAAA;YAClD,MAAM;SACP,CAAC;IACJ,CAAC;CACF,CAAA;AA7EY,gBAAgB;IAF5B,IAAA,eAAM,GAAE;IACR,IAAA,eAAM,EAAC,EAAE,CAAC;GACE,gBAAgB,CA6E5B;AA7EY,4CAAgB","sourcesContent":["import { Module, Global, Provider, Type, DynamicModule } from '@nestjs/common';\nimport {\n  SentryModuleAsyncOptions,\n  SentryOptionsFactory,\n  SentryModuleOptions,\n} from './sentry.interfaces';\nimport { SENTRY_MODULE_OPTIONS, SENTRY_TOKEN } from './sentry.constants';\nimport { SentryService } from './sentry.service';\nimport { createSentryProviders } from './sentry.providers';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { SentryInterceptor } from './sentry.interceptor';\nimport { SentryTransactionService } from './sentry-transaction.service';\n\n@Global()\n@Module({})\nexport class SentryCoreModule {\n  public static forRoot(options: SentryModuleOptions): DynamicModule {\n    const provider = createSentryProviders(options);\n    return {\n      exports: [provider, SentryService],\n      module: SentryCoreModule,\n      providers: [\n        provider,\n        SentryService,\n        SentryTransactionService,\n        {\n          provide: APP_INTERCEPTOR,\n          useClass: SentryInterceptor,\n        },\n      ],\n    };\n  }\n\n  public static forRootAsync(options: SentryModuleAsyncOptions): DynamicModule {\n    const provider: Provider = {\n      inject: [SENTRY_MODULE_OPTIONS],\n      provide: SENTRY_TOKEN,\n      useFactory: (options: SentryModuleOptions) => new SentryService(options),\n    };\n    return {\n      exports: [provider, SentryService],\n      imports: options.imports,\n      module: SentryCoreModule,\n      providers: [\n        ...this.createAsyncProviders(options),\n        provider,\n        SentryService,\n        SentryTransactionService,\n        {\n          provide: APP_INTERCEPTOR,\n          useClass: SentryInterceptor,\n        },\n      ],\n    };\n  }\n\n  private static createAsyncProviders(\n    options: SentryModuleAsyncOptions,\n  ): Provider[] {\n    if (options.useExisting || options.useFactory) {\n      return [this.createAsyncOptionsProvider(options)];\n    }\n    const useClass = options.useClass as Type<SentryOptionsFactory>;\n    return [\n      this.createAsyncOptionsProvider(options),\n      {\n        provide: useClass,\n        useClass,\n      },\n    ];\n  }\n\n  private static createAsyncOptionsProvider(\n    options: SentryModuleAsyncOptions,\n  ): Provider {\n    if (options.useFactory) {\n      return {\n        inject: options.inject || [],\n        provide: SENTRY_MODULE_OPTIONS,\n        useFactory: options.useFactory,\n      };\n    }\n    const inject = [\n      (options.useClass || options.useExisting) as Type<SentryOptionsFactory>,\n    ];\n    return {\n      provide: SENTRY_MODULE_OPTIONS,\n      useFactory: async (optionsFactory: SentryOptionsFactory) =>\n        await optionsFactory.createSentryModuleOptions(),\n      inject,\n    };\n  }\n}\n"]}